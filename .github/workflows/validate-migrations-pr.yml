name: Validate Migrations (PR)

on:
  pull_request:
    paths:
      - 'supabase/migrations/**'

# Grant permissions for commenting on PRs
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-pr-migrations:
    name: Validate Migration Changes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed migration files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            supabase/migrations/*.sql

      - name: List changed migrations
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "üîç Changed migration files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"

      - name: Setup Node.js
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Use official Supabase CLI action instead of npm global install
      - name: Setup Supabase CLI
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Make validation script executable
        if: steps.changed-files.outputs.any_changed == 'true'
        run: chmod +x ./scripts/validate-migration.sh

      - name: Run validation script
        if: steps.changed-files.outputs.any_changed == 'true'
        run: ./scripts/validate-migration.sh

      - name: Check for migration conflicts
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "üîç Checking for duplicate timestamps..."

          # Extract timestamps from filenames
          TIMESTAMPS=$(ls supabase/migrations/*.sql 2>/dev/null | sed 's/.*\///;s/_.*//' | sort)

          # Check for duplicates
          DUPLICATES=$(echo "$TIMESTAMPS" | uniq -d)

          if [ -n "$DUPLICATES" ]; then
            echo "‚ùå ERROR: Duplicate migration timestamps found:"
            echo "$DUPLICATES"
            echo ""
            echo "This can cause migration order issues. Please regenerate with unique timestamps."
            exit 1
          else
            echo "‚úÖ No duplicate timestamps found"
          fi

      - name: Suggest running local tests
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "üí° Reminder: Test migrations locally before merging"
          echo "Run: supabase db reset"
          echo "This will apply all migrations to your local database"

      - name: Comment on PR
        if: steps.changed-files.outputs.any_changed == 'true' && success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Migration validation passed! The migrations look good and will be applied automatically when merged to `main`.'
            })

      - name: Comment on PR failure
        if: steps.changed-files.outputs.any_changed == 'true' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå Migration validation failed. Please review the errors above and fix before merging.'
            })
